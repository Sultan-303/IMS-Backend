name: CI Pipeline

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Run code analysis
      continue-on-error: true
      run: dotnet format --verify-no-changes

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test with coverage
      run: dotnet test --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      
  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: imsapiregistryhab.azurecr.io/ims-api:${{ github.sha }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'imsapiregistryhab.azurecr.io/ims-api:${{ github.sha }}'
        format: 'table'
        exit-code: '1'  # Fail if vulnerabilities found
        severity: 'CRITICAL'
        ignore-unfixed: true
    
    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: imsapiregistryhab.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: imsapiregistryhab.azurecr.io/ims-api:${{ github.sha }}
  
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://ims-api-hab.azurewebsites.net/swagger
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Connection String
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Setting connection string..."
          az webapp config connection-string set \
            --name ims-api-hab \
            --resource-group ims-rg \
            --connection-string-type SQLServer \
            --settings DefaultConnection="Server=tcp:imssqlserverhab.database.windows.net,1433;Initial Catalog=imsdb;Persist Security Info=False;User ID=sqladmin;Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=true;TrustServerCertificate=False;Connection Timeout=30;"

    - name: Install EF Tool
      run: dotnet tool install --global dotnet-ef
      
    - name: Update Database
      run: dotnet ef database update --project IMS.DAL/IMS.DAL.csproj --startup-project IMS.API/IMS.API.csproj
      env:
        ConnectionStrings__DefaultConnection: "Server=tcp:imssqlserverhab.database.windows.net,1433;Initial Catalog=imsdb;Persist Security Info=False;User ID=sqladmin;Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=true;TrustServerCertificate=False;Connection Timeout=30;"

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'ims-api-hab'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: 'imsapiregistryhab.azurecr.io/ims-api:${{ github.sha }}'